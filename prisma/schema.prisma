// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}
model User {
  id            String          @id @default(cuid()) @unique
  name          String?
  chatId        String          @unique
  points        Int
  active        Boolean         @default(true)
  lastLogin     DateTime        @default(now())
  referredBy    String?         @default("admin")
  referralLink  String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}


model Legues {
  id            String @id @default(cuid()) @unique
  name          String
  minEntry      Int
  pointLimit    Int
  trophy        String
  entryReward   String
}

model Points {
  id        String @id @default(cuid()) @unique
  user      String @unique
  points    Int @default(0)
  league    String
  autominer Boolean @default(false)
  tapLimit  Int
  lastTap   DateTime
}

model Bonuster {
  id            String @id @default(cuid()) @unique
  name          String
  icon          String
  points        String
  level         String
}

model DailyBoosters {
  id        String @id @default(cuid()) @unique
  name      String
  count     String
  icon      String
}

model TaskCategories  {
  id          String @id @unique @default(cuid())
  name        String
}

model Tasks {
  id          String @id @unique @default(cuid())
  category    String
  name        String
  points      String
  icon        String
}

model Skins {
  id            String @id @unique @default(cuid())
  name          String
  profitPerHour Int? @default(0)
  image         String  @default("/assets/image/space-bg.avif")
  cost          Int
  league        String @default("pilot")
}